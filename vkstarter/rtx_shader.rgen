#version 460
#extension GL_NVX_raytracing : require

// See: https://github.com/KhronosGroup/GLSL/blob/master/extensions/nv/GLSL_NV_ray_tracing.txt

layout(set = 0, binding = 0) uniform accelerationStructureNVX acceleration_structure;
layout(set = 0, binding = 1, rgba8) uniform image2D result_image;

// The ray payload object is an application-defined struct used to pass 
// data between hit stages and the shader stage that spawned a ray
layout(location = 0) rayPayloadNVX vec3 result_color;

void main() 
{
    // Generate UV-coordinates in the range [-1..1]
    vec2 uv = vec2(gl_LaunchIDNVX.xy) / vec2(gl_LaunchSizeNVX.xy - 1);
    uv = uv * 2.0 - 1.0;

    const vec3 origin = vec3(0.0f);
    const vec3 direction = vec3(uv.x, uv.y, 1.0f);

    const uint ray_flags = gl_RayFlagsNoneNVX;
    const uint cull_mask = 0xFF;
    
    // Index and size of the intersection group in our SBT
    const uint shader_binding_table_record_offset = 0;
    const uint shader_binding_table_record_stride = 0;

    // Index of miss shader group
    const uint miss_index = 0;
    const float tmin = 0.0f;
    const float tmax = 10.0f;
    const int payload_location = 0;

    traceNVX(acceleration_structure,
             ray_flags,
             cull_mask,
             shader_binding_table_record_offset,
             shader_binding_table_record_stride,
             miss_index,
             origin,
             tmin,
             direction,
             tmax,
             payload_location);

    imageStore(result_image, ivec2(gl_LaunchIDNVX.xy), vec4(result_color, 1.0f));
}
